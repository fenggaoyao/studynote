#定义Nginx运行的用户和用户组
#user  nobody; 

#nginx进程数，建议设置为等于CPU总核心数。
worker_processes  auto;

#错误日志
error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#进程pid文件
#pid        logs/nginx.pid;

events {
    #accept_mutex on;   #设置网路连接序列化，防止多个进程对连接的争抢，防止惊群现象发生，默认为on
    #multi_accept off;  #设置一个进程是否同时接受多个网络连接，默认为off

    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; 
    #epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。
    #补充说明：
    #与apache相类，nginx针对不同的操作系统，有不同的事件模型
    #（A）标准事件模型，Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
    #（B）高效事件模型
    # Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
    # Epoll：使用于Linux内核2.6版本及以后的系统。
    # /dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
    # Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
    use epoll;
    worker_connections  65535; #ulimit -n，一个进程最多能打开的文件个数
}

http {
    include       mime.types;  #Content-Type能返回的类型
    default_type  application/octet-stream; #配置Content-Type默认类型,不配置默认值为默认值为text/plain
    
    # 日志格式
    # $remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；
    # $remote_user ：用来记录客户端用户名称；
    # $time_local ： 用来记录访问时间与时区；
    # $request ： 用来记录请求的url与http协议；
    # $status ： 用来记录请求状态；成功是200；
    # $body_bytes_sent ：记录发送给客户端文件主体内容大小；
    # $http_referer ：用来记录从那个页面链接访问过来的；
    # $http_user_agent ：记录客户端浏览器的相关信息；
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    # 是否开启access日志
    access_log  logs/access.log  main;

    #是否启用sendfile方式传输文件
    sendfile        on;

    #socket选项，数据包会累计到一定大小之后才会发送，减小了额外开销，提高网络效率
    tcp_nopush     on;

    #socket选项，尽快发送, 关闭时会使用Nagle算法，会将数据先存起来，等凑够例如200ms或者等到收到确认后再发送再发送
    tcp_nodelay    on;

    #keepalive_timeout timeout [header_timeout]
    #服务器端对连接的保持时间。默认值为75s; header_timeout，可选项，在应答报文头部的Keep-Alive域设置超时时间
    #下面配置的含义是，在服务器端保持连接的时间设置为120s，发给用户端的应答报文头部中Keep-Alive域的超时时间设置为100s
    keepalive_timeout  120s 100s;

    #gzip压缩
    gzip  on;
    gzip_vary          on;
    gzip_comp_level    6; #压缩等级
    gzip_buffers       16 8k; #压缩缓冲区
    gzip_http_version  1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    #gzip_disable 指令接受一个正则表达式，当请求头中的 UserAgent 字段满足这个正则时，响应不会启用gzip
    gzip_disable       "msie6";
    gzip_min_length    1000;  #最小压缩文件大小
    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_proxied       any;

    #设定负载均衡的服务器列表
    #目前支持以下内置策略方式的分配
    #1、轮询（默认），每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
    #2、weight，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
    #3、ip_hash，每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
    upstream myserver {
        ip_hash #每个请求按访问ip的hash结果分配
        server 192.168.8.1:3128 weight=5; #weigth参数表示权值，权值越高被分配到的几率越大
        server 192.168.8.2:80   weight=1 backup; #热备(其它所有的非backup机器down或者忙的时候，请求backup机器))
        server 192.168.8.3:80   weight=6;
    }

    #虚拟主机
    server {
        #listen 127.0.0.1:8000;  #只监听来自127.0.0.1这个IP，请求8000端口的请求
        #listen 127.0.0.1; #只监听来自127.0.0.1这个IP，请求80端口的请求（不指定端口，默认80）
        #listen 8000; #监听来自所有IP，请求8000端口的请求
        #listen *:8000; #和上面效果一样
        #listen localhost:8000; #和第一种效果一致
        listen       80;
        
        #配置虚拟主机的名称
        #如果有多个名称，用空格隔开:server_name myserver.com www.myserver.com
        #通配符:server_name myserver.* *.myserver.com
        server_name  localhost;

        #单连接请求上限次数
        keepalive_requests 120;

        #设定本虚拟主机的访问日志
        access_log  logs/xxx.access.log  main;

        # location块
        # [ =  ]精确匹配，如果找到，立即停止搜索，并立即处理请求（优先级最高）
        # [ ~  ]区分大小写
        # [ ^~ ]只匹配字符串，不匹配正则表达式
        # [ ~* ]不区分大小写
        # [ @  ]指定一个命名的location，一般只用于内部重定向请求
        # 匹配过程
        # 首先对字符串进行匹配查询，最确切的匹配将被使用
        # 然后，正则表达式的匹配查询开始，匹配第一个结果后会停止搜索
        # 如果没有找到正则表达式，将使用字符串的搜索结果
        # 如果字符串和正则都匹配，那么正则优先级较高
        location / {
            #定义服务器的默认网站根目录位置
            root   html;

            #定义首页索引文件的名称
            index  index.html index.htm;

            etag      on;
            expires   30d;
        }

        #定义错误提示页面
        error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        #反向代理
        location /v1 {
            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            #设置代理服务器
            proxy_pass   http://myserver; #请求转向“mysvr1”定义的服务器列表
            
            client_max_body_size 10m; #允许客户端请求的最大单文件字节数
            client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，

            proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
            proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
            proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
            proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
        }

        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置
        location ~ \.php$ {
           root           html;
           fastcgi_pass   127.0.0.1:9000;
           fastcgi_index  index.php;
           fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
           include        fastcgi_params;
        }

        #静态文件，nginx自己处理
        location ^/(images|javascript|js|css|flash|media|static)/ {
            #根目录位置
            root /var/www/virtual/htdocs;
            #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。
            expires 30d; #静态资源过时间30天

            #add_header用于为后端服务器返回的response添加请求头，这里通过add_header实现CROS跨域请求服务器
            add_header Access-Control-Allow-Origin *;
        }

        #URL重定向
        location /v1/api {
             #rewrite只能对域名后边的除去传递的参数外的字符串起作用，
             #例如www.c.com/proxy/html/api/msg?method=1&para=2只能对/proxy/html/api/msg重写。
            rewrite ^/ http://192.168.18.250;
        }

        #设定查看Nginx状态的地址
        location /NginxStatus {
            stub_status on;
            access_log on;
            auth_basic "NginxStatus";
            auth_basic_user_file  conf/htpasswd;
        }

        #禁止访问 .htaccess 文件
        location ~ /\.ht {
           deny  all;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    server {
       listen       8000;
       listen       somename:8080;
       server_name  somename  alias  another.alias;

       location / {
           root   html;
           index  index.html index.htm;
       }
    }


    # HTTPS server
    # SSL标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key
    server {
        #HTTPS的固定端口号是443，不同于HTTP的80端口；
        listen       443 ssl;
        server_name  localhost;

        #ssl证书文件位置(常见证书文件格式为：crt/pem)
        ssl_certificate      cert.pem;
        ssl_certificate_key  cert.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
           root   html;
           index  index.html index.htm;
        }
    }

}